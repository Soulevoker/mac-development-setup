---
- name: Configure Mac Studio
  hosts: localhost
  connection: local
  tasks:
    - name: Verify Brewfile exists and is readable
      stat:
        path: "{{ playbook_dir }}/Brewfile"
      register: brewfile_check
      failed_when: not brewfile_check.stat.exists or not brewfile_check.stat.readable
      tags: packages

    - name: Read Brewfile to extract packages
      slurp:
        src: "{{ playbook_dir }}/Brewfile"
      register: brewfile_content
      tags: packages

    - name: Parse Brewfile for brew and cask packages
      set_fact:
        brew_packages: "{{ brewfile_content.content | b64decode | regex_findall('brew \"([^\"]+)\"') }}"
        cask_packages: "{{ brewfile_content.content | b64decode | regex_findall('cask \"([^\"]+)\"') }}"
      tags: packages

    - name: Install Homebrew brew packages
      homebrew:
        name: "{{ item }}"
        state: present
      loop: "{{ brew_packages }}"
      register: brew_install
      failed_when: brew_install.failed
      tags: packages

    - name: Install Homebrew cask packages
      homebrew_cask:
        name: "{{ item }}"
        state: present
      loop: "{{ cask_packages }}"
      register: cask_install
      failed_when: cask_install.failed
      tags: packages
      
    - name: Ensure OpenJDK is symlinked
      command: brew link openjdk@21 --force
      args:
        creates: /opt/homebrew/bin/java
      tags: packages

    - name: Verify Homebrew packages are installed
      stat:
        path: "{{ item }}"
      loop:
        - /opt/homebrew/bin/zsh
        - /opt/homebrew/bin/ansible
        - /opt/homebrew/bin/chezmoi
        - /opt/homebrew/bin/podman
        - /opt/homebrew/bin/java
        - /opt/homebrew/bin/nvim
        - /opt/homebrew/bin/go
        - /Applications/iTerm.app
        - /Applications/JetBrains Toolbox.app
        - /Applications/Google Chrome.app
      register: package_check
      failed_when: not package_check.stat.exists
      tags: packages
      
    - name: Check if Podman machine exists
      command: podman machine list --format json
      register: podman_machine_list
      changed_when: false
      failed_when: podman_machine_list.rc != 0
      tags: podman

    - name: Initialize Podman machine
      command: podman machine init --cpus 2 --memory 2048 --disk-size 20
      when: podman_machine_list.stdout | from_json | length == 0
      args:
        creates: ~/.config/containers/podman/machine/qemu/podman-machine-default.json
      register: podman_machine_init
      failed_when: podman_machine_init.rc != 0
      tags: podman

    - name: Refresh sudo session for Podman helper
      command: sudo -v
      tags: podman

    - name: Install Podman macOS networking helper
      command: podman-mac-helper install
      become: yes
      become_method: sudo
      args:
        creates: /etc/podman/podman-mac-helper
      register: podman_helper_install
      failed_when: podman_helper_install.rc != 0
      tags: podman

    - name: Start Podman VM
      command: podman machine start
      register: podman_vm
      changed_when: "'already running' not in podman_vm.stderr"
      failed_when: podman_vm.rc != 0 and 'already running' not in podman_vm.stderr
      tags: podman

    - name: Verify Podman networking
      command: podman run --rm -p 8080:80 nginx
      register: podman_nginx
      async: 5
      poll: 0
      tags: podman
      
    - name: Wait for Nginx container to be ready
      wait_for:
        host: localhost
        port: 8080
        state: started
        timeout: 30
      tags: podman

    - name: Check Podman port forwarding
      command: curl -s http://localhost:8080
      register: podman_curl
      failed_when: "'Welcome to nginx' not in podman_curl.stdout"
      tags: podman

    - name: Stop Podman test container
      shell: podman stop $(podman ps -q)
      when: podman_nginx is success
      ignore_errors: true
      tags: podman

    - name: Install Oh My Zsh
      shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" --unattended
      args:
        creates: ~/.oh-my-zsh
      tags: zsh

    - name: Verify Oh My Zsh is installed
      stat:
        path: ~/.oh-my-zsh/oh-my-zsh.sh
      register: ohmyzsh_check
      failed_when: not ohmyzsh_check.stat.exists
      tags: zsh

    - name: Set zsh as default shell
      shell: chsh -s /bin/zsh
      tags: zsh

    - name: Verify zsh is the default shell
      command: echo $SHELL
      register: shell_check
      changed_when: false
      failed_when: shell_check.stdout != "/bin/zsh"
      tags: zsh

    - name: Copy JetBrains Toolbox IDE configuration
      copy:
        src: "{{ playbook_dir }}/toolbox-ides.json"
        dest: ~/.local/share/JetBrains/Toolbox/ides-to-install.json
      tags: ides

    - name: Trigger JetBrains Toolbox to install IDEs
      command: open "jetbrains://toolbox/install/{{ item }}"
      loop:
        - IU
        - PY
        - GO
      register: toolbox_install
      tags: ides

    - name: Wait for JetBrains IDEs to install
      pause:
        seconds: 180
      tags: ides

    - name: Verify JetBrains IDEs are installed
      command: find ~/Applications -maxdepth 1 -name "{{ item }}"
      loop:
        - "IntelliJ IDEA*.app"
        - "PyCharm*.app"
        - "GoLand*.app"
      register: ide_check
      changed_when: false
      failed_when: ide_check.stdout == ""
      tags: ides

    - name: Apply chezmoi dotfiles
      command: chezmoi --source "{{ playbook_dir }}/dotfiles" apply
      register: chezmoi_result
      tags: dotfiles

    - name: Verify chezmoi applied dotfiles
      stat:
        path: "{{ item }}"
      loop:
        - ~/.zshrc
        - ~/.gitconfig
        - ~/.oh-my-zsh
      register: dotfile_check
      failed_when: not dotfile_check.stat.exists
      tags: dotfiles

    - name: Final success message
      debug:
        msg: "All components installed and configured successfully with Podman and IDEs!"
      when: brew_result is success and podman_curl is success and ohmyzsh_result is success and shell_result is success and chezmoi_result is success and ide_check is success
      tags: [packages, podman, zsh, dotfiles, ides]
